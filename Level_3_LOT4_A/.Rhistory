"G03D", "G02B", "B03B", "B03A", "D10A", "J01F", "S01A", "J01A",
"D07A", "H02A", "D11A", "L04A", "D05A", "D05B")){
medATC4<-substr((medtable[,ATC]), 1,4)
newMED<-medtable[(medATC4%in%Lot4ATC),]
medID<-as.vector(newMED[,ID])
flowchart_ATC<-c(nrow(medtable), nrow(newMED))
ATC_filter_output<-list(medID, flowchart_ATC)
return(ATC_filter_output)
}
#should return odd rows
medID<-ATCfilter(medtable = MEDICINES, ID="numloc", ATC="ATCex")
#good
medID
rm(medID)
rm(MEDICINES)
myMED<-as.data.frame(read.csv("C:\\Users\\Acer\\OneDrive\\Documents\\GitHub\\LOT4\\CDMInstances\\LOT4\\MEDICINES_2019_SPF.csv"))
med_ID<-ATCfilter(medtable = myMED)
med_ID
combine_filter<-function(person_filter_ID= filtered_data[[1]], med_filter_ID= medID[[1]])
{tst <- c(unique(person_filter_ID),unique(med_filter_ID))
final_filter_ID <- tst[duplicated(tst)]
return(final_filter_ID)}
#example with example data
combine_filter(person_filter_ID = example_filtered_data[[1]], med_filter_ID = medID)
#example with example data
combine_filter(person_filter_ID = example_filtered_data[[1]], med_filter_ID = medID[[1]])
combine_filter<-function(person_filter_ID= filtered_data[[1]], med_filter_ID= med_ID[[1]])
{tst <- c(unique(person_filter_ID),unique(med_filter_ID))
final_filter_ID <- tst[duplicated(tst)]
return(final_filter_ID)}
#example with example data
combine_filter(person_filter_ID = example_filtered_data[[1]], med_filter_ID = med_ID[[1]])
View(example_filtered_data)
#example with example data
combine_filter(person_filter_ID = example_filtered_data[[1]], med_filter_ID = medID[[1]])
#should return odd rows
medID<-ATCfilter(medtable = MEDICINES, ID="numloc", ATC="ATCex")
ATCex<-rep(c("G03AA13", "A10AE01"),50)
#create sample dataset
numloc<-(1:100)
MEDICINES<-as.data.frame(cbind(numloc, ATCex))
#should return odd rows
medID<-ATCfilter(medtable = MEDICINES, ID="numloc", ATC="ATCex")
View(medID)
#example with example data
combine_filter(person_filter_ID = example_filtered_data[[1]], med_filter_ID = medID[[1]])
#example with example data
ex_filter_ID<-combine_filter(person_filter_ID = example_filtered_data[[1]], med_filter_ID = medID[[1]])
real_filter_ID<-combine_filter(person_filter_ID = filtered_data[[1]], med_filter_ID = med_ID[[1]])
real_filter_ID
View(med_ID)
View(med_ID)
filtered_data[[1]]
med_ID[[1]]
table(filtered_data[[1]]%in%med_filter_ID = med_ID[[1]])
table(filtered_data[[1]]%in% med_ID[[1]])
all_ID<-c(filtered_data[[1]], med_ID[[1]])
table(duplicated(all_ID))
all_ID<-c(unique(filtered_data[[1]]), unique(med_ID[[1]]))
table(duplicated(all_ID))
View(myMED)
View(PERSONS)
table(PERSONS$person_id%in%myMED$person_id)
table(PERSONS$person_id%in%(unique(myMED$person_id))
table(PERSONS$person_id%in%(unique(myMED$person_id)))
table(PERSONS$person_id%in%(unique(myMED$person_id)))
freq(myMED$person_id)
frequency(myMED$person_id)
View(myMED)
table(myMED$person_id)
hist(table(myMED$person_id))
table(PERSONS$person_id%in%(unique(myMED$person_id)))
filtered_data[[1]]
med_ID[[1]]
ATCfilter<-function(medtable=MEDICINES, ID="person_id", ATC="medicinal_product_atc_code", Lot4ATC=
c( "N03A","N05B", "N05A", "C07A", "N06A", "N07C", "N02C", "C02A", "G03A",
"G03D", "G02B", "B03B", "B03A", "D10A", "J01F", "S01A", "J01A",
"D07A", "H02A", "D11A", "L04A", "D05A", "D05B")){
medATC4<-substr((medtable[,ATC]), 1,4)
newMED<-medtable[(medATC4%in%Lot4ATC),]
medID<-newMED[[ID]]
flowchart_ATC<-c(nrow(medtable), nrow(newMED))
ATC_filter_output<-list(medID, flowchart_ATC)
return(ATC_filter_output)
}
#should return odd rows
medID<-ATCfilter(medtable = MEDICINES, ID="numloc", ATC="ATCex")
#good
rm(medID)
rm(MEDICINES)
myMED<-as.data.frame(read.csv("C:\\Users\\Acer\\OneDrive\\Documents\\GitHub\\LOT4\\CDMInstances\\LOT4\\MEDICINES_2019_SPF.csv"))
med_ID<-ATCfilter(medtable = myMED)
#last step, combine
combine_filter<-function(person_filter_ID= filtered_data[[1]], med_filter_ID= med_ID[[1]])
{tst <- c((person_filter_ID),unique(med_filter_ID))
final_filter_ID <- tst[duplicated(tst)]
return(final_filter_ID)}
#example with example data
ex_filter_ID<-combine_filter(person_filter_ID = example_filtered_data[[1]], med_filter_ID = medID[[1]])
real_filter_ID<-combine_filter(person_filter_ID = filtered_data[[1]], med_filter_ID = med_ID[[1]])
real_filter_ID
med_filter_ID = med_ID[[1]]
med_ID[[1]]
filtered_data[[1]]
real_filter_ID<-combine_filter(person_filter_ID = filtered_data[[1]], med_filter_ID = med_ID[[1]])
real_filter_ID
med_ID
ATCfilter<-function(medtable=MEDICINES, ID="person_id", ATC="medicinal_product_atc_code", Lot4ATC=
c( "N03A","N05B", "N05A", "C07A", "N06A", "N07C", "N02C", "C02A", "G03A",
"G03D", "G02B", "B03B", "B03A", "D10A", "J01F", "S01A", "J01A",
"D07A", "H02A", "D11A", "L04A", "D05A", "D05B")){
medATC4<-substr((medtable[,ATC]), 1,4)
newMED<-medtable[(medATC4%in%Lot4ATC),]
medID<-newMED[[ID]]
flowchart_ATC<-c(nrow(medtable), nrow(newMED))
ATC_filter_output<-list(medID, flowchart_ATC, newMED)
return(ATC_filter_output)
}
#should return odd rows
medID<-ATCfilter(medtable = MEDICINES, ID="numloc", ATC="ATCex")
medID
med_ID<-ATCfilter(medtable = myMED)
med_ID
med_ID[[3]]
combine_filter<-function(person_filter_ID= filtered_data[[1]], med_filter_ID= med_ID[[1]])
{all_ID <- c(unique(person_filter_ID),unique(med_filter_ID))
final_filter_ID <- all_ID[duplicated(all_ID)==T]
return(final_filter_ID)}
real_filter_ID<-combine_filter(person_filter_ID = filtered_data[[1]], med_filter_ID = med_ID[[1]])
real_filter_ID
all_ATC<-c(filtered_data[[1]],med_filter_ID= med_ID[[1]])
hist(all_ATC)
filtered_data[[2]]
all_ATC<-c(unique(filtered_data[[1]]), unique(med_filter_ID= med_ID[[1]]))
med_filter_ID[[3]][["person_id"]]
med_filter_data<-med_filter_ID[[3]]
med_filter_data<-med_ID[[3]]
final_med_data<-med_filter_data$person_id%in%filtered_data[[1]]
final_med_data<-med_filter_data[(med_filter_data$person_id%in%filtered_data[[1]]==T),]
View(final_med_data)
combine_filter<-function(person_filter_ID= filtered_data[[1]], med_filter_data= med_ID[[3]])
{final_med_data<- med_filter_data[(med_filter_data[["person_id"]]%in% person_filter_ID=T),]
final_med_ID<-final_med_data[["person_id"]]
final_flowchart<-c(nrow(med_filter_data), nrow(final_med_data))
final_output<-list(final_med_ID, final_flowchart, final_med_data)
return(final_output)}
ex_output<-combine_filter(person_filter_ID = filtered_data[[1]], med_filter_data= med_ID[[3]])
combine_filter<-function(person_filter_ID= filtered_data[[1]], med_filter_data= med_ID[[3]])
{final_med_data<- med_filter_data[(med_filter_data[["person_id"]]%in%person_filter_ID==T),]
final_med_ID<-final_med_data[["person_id"]]
final_flowchart<-c(nrow(med_filter_data), nrow(final_med_data))
final_output<-list(final_med_ID, final_flowchart, final_med_data)
return(final_output)}
ex_output<-combine_filter(person_filter_ID = filtered_data[[1]], med_filter_data= med_ID[[3]])
ex_output
ex_output[[1]]
ex_output[[2]]
ex_output[[3]]
ex_output[[2]]
ex_output[[1]]
combine_filter<-function(person_filter_ID= filtered_data[[1]], med_filter_data= med_ID[[3]])
{final_med_data<- med_filter_data[(med_filter_data[["person_id"]]%in%person_filter_ID==T),]
final_med_ID<-unique(final_med_data[["person_id"]])
final_flowchart<-c(nrow(med_filter_data), nrow(final_med_data))
final_output<-list(final_med_ID, final_flowchart, final_med_data)
return(final_output)}
ex_output<-combine_filter(person_filter_ID = filtered_data[[1]], med_filter_data= med_ID[[3]])
ex_output[[1]]
ex_output[[2]]
ex_output[[3]]
ex_output[[2]]
ex_output[[1]]
filtered_data[[2]]
length(ex_output[[2]])
length(ex_output[[1]])
cases<-c(981, 61, 39,19)
steps<- c("original", "female", "DOB", "ATC")
plot(x=(1:4), y=cases)
plot(x=(1:4), y=cases, type= "b", lwd=3)
PERSONS<-read.csv("C:\\Users\\Acer\\OneDrive\\Documents\\GitHub\\LOT4\\CDMInstances\\LOT4\\PERSONS.csv")
table(PERSONS$sex_at_instance_creation)
rm(list=ls())
if(!require(rstudioapi)){install.packages("rstudioapi")}
library(rstudioapi)
projectFolder<-dirname(rstudioapi::getSourceEditorContext()$path)
setwd(projectFolder)
###############################################
source("packages.R")
source("99_path.R")
source(paste0(pre_dir, "info.R"))
source(paste0(pre_dir,"study_parameters.R"))
setwd(projectFolder)
#################################################################
#Study_population and Source_population
################################################################
########################################################
#Create output folders
########################################################
if (subpopulations_present=="No"){
#output folder for STUDY_SOURCE_POPULATION report in g_output
if ("STUDY_SOURCE_POPULATION" %in% list.files(output_dir)){
unlink(paste0(output_dir,"STUDY_SOURCE_POPULATION"), recursive = T)#delete folder
dir.create(paste(output_dir, "STUDY_SOURCE_POPULATION", sep=""))
std_source_pop_dir<-paste(output_dir, "STUDY_SOURCE_POPULATION/", sep="")
dir.create(paste(std_source_pop_dir,"Masked", sep=""))
} else {
#Create the  folder in the output dir
dir.create(paste(output_dir, "STUDY_SOURCE_POPULATION", sep=""))
std_source_pop_dir<-paste(output_dir, "STUDY_SOURCE_POPULATION/", sep="")
dir.create(paste(std_source_pop_dir,"Masked", sep=""))
}
#STUDY_SOURCE_POPULATION_tmp/STUDY_SOURCE_POPULATION folder where all intermediary files are saved
if ("STUDY_SOURCE_POPULATION" %in% list.files(tmp)){
unlink(paste0(tmp,"STUDY_SOURCE_POPULATION"), recursive = T)#delete folder
dir.create(paste(tmp, "STUDY_SOURCE_POPULATION", sep=""))
std_pop_tmp<-paste(tmp, "STUDY_SOURCE_POPULATION/", sep="")
}else{
#Create the STUDY_SOURCE_POPULATION folder in the output dir
dir.create(paste(tmp, "STUDY_SOURCE_POPULATION", sep=""))
std_pop_tmp<-paste(tmp, "STUDY_SOURCE_POPULATION/", sep="")
}
} else {
#output folder for MEDICINES report in g_output
if ("STUDY_SOURCE_POPULATION" %in% list.files(output_dir)){
unlink(paste0(output_dir,"STUDY_SOURCE_POPULATION"), recursive = T)#delete folder
dir.create(paste(output_dir, "STUDY_SOURCE_POPULATION", sep=""))
std_source_pop_dir<-paste(output_dir, "STUDY_SOURCE_POPULATION/", sep="")
do.call(file.remove, list(list.files(std_source_pop_dir, full.names = T)))
for (i in 1:length(subpopulations_names)){
dir.create(paste0(std_source_pop_dir, subpopulations_names[i]))
}
for (i in 1:length(subpopulations_names)){
dir.create(paste0(std_source_pop_dir, subpopulations_names[i],"/Masked"))
}
} else {
#Create the STUDY_SOURCE_POPULATION folder in the output dir
dir.create(paste(output_dir, "STUDY_SOURCE_POPULATION", sep=""))
std_source_pop_dir<-paste(output_dir, "STUDY_SOURCE_POPULATION/", sep="")
for (i in 1:length(subpopulations_names)){
dir.create(paste0(std_source_pop_dir, subpopulations_names[i]))
}
for (i in 1:length(subpopulations_names)){
dir.create(paste0(std_source_pop_dir, subpopulations_names[i],"/Masked"))
}
}
#STUDY_SOURCE_POPULATION_tmp/STUDY_SOURCE_POPULATION folder where all intermediary files are saved
if ("STUDY_SOURCE_POPULATION" %in% list.files(tmp)){
unlink(paste0(tmp,"STUDY_SOURCE_POPULATION"), recursive = T)#delete folder
dir.create(paste(tmp, "STUDY_SOURCE_POPULATION", sep=""))
std_pop_tmp<-paste(tmp, "STUDY_SOURCE_POPULATION/", sep="")
}else{
#Create the STUDY_SOURCE_POPULATION folder in the output dir
dir.create(paste(tmp, "STUDY_SOURCE_POPULATION", sep=""))
std_pop_tmp<-paste(tmp, "STUDY_SOURCE_POPULATION/", sep="")
}
}
#######################################################
#std_source_pop_dir output folder for study_source population
#std_pop_tmp output folder for temporary files
#############################################################
#Load functions
source(paste0(pre_dir,"functions/", "CreateSpells_v_10.R"))
source(paste0(pre_dir,"functions/", "CountPersonTimeV12.5.R"))
source(paste0(pre_dir,"functions/", "CountPersonTimeV13.6.R"))
source(paste0(pre_dir,"functions/", "DRECountThresholdV3.R"))
source(paste0(pre_dir,"functions/", "FUNCTIONS.R"))
# source(paste0(pre_dir,"functions/", "merge_gap.R"))
#Set parameters
source(paste0(pre_dir,"Step_00_SetParameters.R"))
rint('Import and append observation periods files')
#made a dummy duplicate to test append--> works fine
OBSERVATION_PERIODS <- IMPORT_PATTERN(pat = "OBSERVATION_PERIODS", dir = path_dir)
print('Set start and end date to date format and if end date is empty fill with end study date')
lapply(c("op_start_date","op_end_date"), function (x) OBSERVATION_PERIODS <- OBSERVATION_PERIODS[,eval(x) := as.IDate(as.character(get(x)),"%Y%m%d")])
OBSERVATION_PERIODS <- OBSERVATION_PERIODS[is.na(op_end_date), op_end_date := end_study_date]
#deleted 3 start dates in dummy duplicate to test removing start_date=NA
OBSERVATION_PERIODS <- OBSERVATION_PERIODS[(is.na(op_start_date)==F),]
#good
FlowChartCreateSpells <- list()
if(SUBP){
print("There are subpopulations, so a column with meaning_set is added as specified in metadata")
for (i in 1:nrow(op_meaning_list_set)){
OBSERVATION_PERIODS[OBSERVATION_PERIODS[, op_meaning %in% unlist(str_split(op_meaning_list_set[i,op_meanings_list_per_set], pattern = " "))], meaning_set:=op_meaning_list_set[i,op_meaning_sets]]
}
}
if(SUBP){
FlowChartOverlap <- list()
print("Create subpopulations subsets, Create spells and select latest")
for(i in 1:nrow(subpopulation_meanings)){
print(subpopulation_meanings[["subpopulations"]][i])
before <- nrow(OBSERVATION_PERIODS)
TEMP <- OBSERVATION_PERIODS[meaning_set %in% unlist(str_split(subpopulation_meanings[subpopulations==subpopulations[i],meaning_sets], pattern = " "))]
TEMP <- TEMP[,c("person_id","op_start_date","op_end_date","meaning_set")]
if(length(strsplit(subpopulation_meanings[["subpopulations"]][i],"-")[[1]]) > 1){
print("Select only overlapping periods")
FlowChartOverlap[[paste0("Rows at start ",subpopulation_meanings[["subpopulations"]][i])]]$count <- nrow(TEMP)
k=1
meaning_sets <- unique(TEMP[["meaning_set"]])
while (k < length(meaning_sets)){
if(k == 1) {meaning_sets1 <- meaning_sets[k]} else {meaning_sets1 <- paste0(meaning_sets[1],"_",meaning_sets[2])}
meaning_sets2 <- meaning_sets[k+1]
TEMP <- TEMP[meaning_set %in% c(meaning_sets1,meaning_sets2), ]
FlowChartOverlap[[paste0("Rows in pair ",meaning_sets1,"|||",meaning_sets2," for",subpopulation_meanings[["subpopulations"]][i])]]$count <- nrow(TEMP)
CreateSpells(dataset = TEMP,
id = "person_id",
start_date = "op_start_date",
end_date = "op_end_date",
category = "meaning_set",
replace_missing_end_date = "date_creation",
overlap = T,
#only_overlaps = T,
dataset_overlap = "overlap")
setnames(overlap,"category","meaning_set")
setnames(overlap, "entry_spell_category", "op_start_date")
setnames(overlap, "exit_spell_category", "op_end_date")
overlap[,op_start_date := as.IDate(op_start_date)]
overlap[,op_end_date := as.IDate(op_end_date)]
FlowChartOverlap[[paste0("Rows with overlap ",meaning_sets1,"|||",meaning_sets2," for",subpopulation_meanings[["subpopulations"]][i])]]$count <- nrow(overlap)
if(k < length(meaning_sets)-1){
meaning_sets3 <- meaning_sets[k + 2:length(meaning_sets)] #repair this
TEMP <- copy(OBSERVATION_PERIODS)[meaning_set %in% meaning_sets3,c("person_id","op_start_date","op_end_date","meaning_set")]
FlowChartOverlap[[paste0("Rows in that where not in pair ",meaning_sets[1],"|||",meaning_sets[2]," for",subpopulation_meanings[["subpopulations"]][i])]]$count <- nrow(TEMP)
overlap[,num_spell := NULL]
TEMP <- rbind(overlap,TEMP,fill = T)
rm(meaning_sets3)
} else TEMP <- overlap
FlowChartOverlap[[paste0("Rows at end of round ",meaning_sets1,"|||",meaning_sets2," for",subpopulation_meanings[["subpopulations"]][i])]]$count <- nrow(TEMP)
rm(overlap,meaning_sets1,meaning_sets2)
gc()
k = k+1
if(nrow(TEMP)==0){
k = length(meaning_sets)
print(paste0(subpopulation_meanings[["subpopulations"]][i]," Has no overlapping spells so a file with o rows is returned"))
}
}
rm(meaning_sets,k)
gc()
}else{
TEMP <- CreateSpells(
dataset=TEMP,
id="person_id" ,
start_date = "op_start_date",
end_date = "op_end_date",
overlap = F,
dataset_overlap = "overlap",
replace_missing_end_date = end_study_date,
only_overlaps = F
)
TEMP <- TEMP[,temp := lapply(.SD, max), by = c("person_id"), .SDcols = "num_spell"][temp == num_spell,][,temp := NULL]
setnames(TEMP, "entry_spell_category", "op_start_date")
setnames(TEMP, "exit_spell_category", "op_end_date")
TEMP[,op_start_date := as.IDate(op_start_date)]
TEMP[,op_end_date := as.IDate(op_end_date)]
}
TEMP <- TEMP[,temp := lapply(.SD, max), by = c("person_id"), .SDcols = "num_spell"][temp == num_spell,][,temp := NULL]
saveRDS(TEMP, file = paste0(std_pop_tmp,subpopulation_meanings[["subpopulations"]][i],"_OBS_SPELLS.rds"))
after <- nrow(TEMP)
FlowChartCreateSpells[[paste0("Spells_",subpopulation_meanings[["subpopulations"]][i])]]$step <- "01_CreateSpells"
FlowChartCreateSpells[[paste0("Spells_",subpopulation_meanings[["subpopulations"]][i])]]$population <- subpopulation_meanings[["subpopulations"]][i]
FlowChartCreateSpells[[paste0("Spells_",subpopulation_meanings[["subpopulations"]][i])]]$before <- before
FlowChartCreateSpells[[paste0("Spells_",subpopulation_meanings[["subpopulations"]][i])]]$after <- after
rm(TEMP)
gc()
}
}
######################################################################################################################
# goal: one observation window per participant, most recent, gaps<7 ignored
View(OBSERVATION_PERIODS)
#29/10- DECISION- just merging gaps in observations BEFORE Create-Spells- not selecting most recent- doesn't matter going backward or forward
#BUT ORDER is very important.
#
OBSERVATION_PERIODS[OBSERVATION_PERIODS$person_id=="ConCDM_SIM_200421_00005",]
OBSERVATION_PERIODS[order(OBSERVATION_PERIODS$person_id, OBSERVATION_PERIODS$op_start_date)]
merge_gap<-function(mydata=OBSERVATION_PERIODS, ID="person_id", startdate="op_start_date", enddate="op_end_date", gap=7){
# order by ID and startdate
mydata<-mydata[order(mydata[[ID]],mydata[[startdate]])]
ID_vec<-unique(mydata[[ID]])
for (i in 1:length(ID_vec)){
j<-1
while(j<nrow(mydata[mydata[[ID]]==ID_vec[i],])){
if((mydata[mydata[[ID]]==ID_vec[i],][j+1][[startdate]]-mydata[mydata[[ID]]==ID_vec[i],][j][[enddate]])<=gap){
mydata[mydata[[ID]]==ID_vec[i],][j][[enddate]]<-mydata[mydata[[ID]]==ID_vec[i],][j+1][[enddate]]
#if row is merged- then add an NA to remove the row in the next step
mydata[mydata[[ID]]==ID_vec[i],][j+1][[startdate]]<-NA
}
j<-j+1}
}
#remove merged rows
mydata<-mydata[complete.cases(mydata[[startdate]])==T, ]
return(mydata)
}
before_merge<-nrow(OBSERVATION_PERIODS)
OBSERVATION_PERIODS_merge<-merge_gap(OBSERVATION_PERIODS, ID="person_id", startdate="op_start_date", enddate="op_end_date", gap=7)
#29/10- DECISION- just merging gaps in observations BEFORE Create-Spells- not selecting most recent- doesn't matter going backward or forward
#BUT ORDER is very important.
OBSERVATION_PERIODS[OBSERVATION_PERIODS$person_id=="ConCDM_SIM_200421_00005",]
OBSERVATION_PERIODS_merge[OBSERVATION_PERIODS_merge$person_id=="ConCDM_SIM_200421_00005",]
OBSERVATION_PERIODS<- OBSERVATION_PERIODS[order(OBSERVATION_PERIODS$person_id, OBSERVATION_PERIODS$op_start_date)]
OBSERVATION_PERIODS[OBSERVATION_PERIODS$person_id=="ConCDM_SIM_200421_00005",]
merge_gap<-function(mydata=OBSERVATION_PERIODS, ID="person_id", startdate="op_start_date", enddate="op_end_date", gap=7){
# order by ID and startdate
ID_vec<-unique(mydata[[ID]])
for (i in 1:length(ID_vec)){
j<-1
while(j<nrow(mydata[mydata[[ID]]==ID_vec[i],])){
obs_gap<-mydata[mydata[[ID]]==ID_vec[i],][j+1][[startdate]]-mydata[mydata[[ID]]==ID_vec[i],][j][[enddate]]
if(between(obs_gap,1,gap)){
mydata[mydata[[ID]]==ID_vec[i],][j][[enddate]]<-mydata[mydata[[ID]]==ID_vec[i],][j+1][[enddate]]
#if row is merged- then add an NA to remove the row in the next step
mydata[mydata[[ID]]==ID_vec[i],][j+1][[startdate]]<-NA
}
j<-j+1}
}
#remove merged rows
mydata<-mydata[complete.cases(mydata[[startdate]])==T, ]
return(mydata)
}
print("order OBSVERVATION_PERIODS by ID and startdate")
OBSERVATION_PERIODS<- OBSERVATION_PERIODS[order(OBSERVATION_PERIODS$person_id, OBSERVATION_PERIODS$op_start_date)]
print("merging gaps<=7")
before_merge<-nrow(OBSERVATION_PERIODS)
OBSERVATION_PERIODS_merge<-merge_gap(OBSERVATION_PERIODS, ID="person_id", startdate="op_start_date", enddate="op_end_date", gap=7)
OBSERVATION_PERIODS_merge[OBSERVATION_PERIODS_merge$person_id=="ConCDM_SIM_200421_00005",]
View(OBSERVATION_PERIODS_merge)
print("order OBSVERVATION_PERIODS by ID and startdate")
OBSERVATION_PERIODS<- OBSERVATION_PERIODS[order(OBSERVATION_PERIODS$person_id, OBSERVATION_PERIODS$op_start_date)]
print("merging gaps<=7")
before_merge<-nrow(OBSERVATION_PERIODS)
OBSERVATION_PERIODS_merge1<-merge_gap(OBSERVATION_PERIODS, ID="person_id", startdate="op_start_date", enddate="op_end_date", gap=7)
merged_ids<-rep(NA, length(ID_vec))
merge_gap<-function(mydata=OBSERVATION_PERIODS, ID="person_id", startdate="op_start_date", enddate="op_end_date", gap=7){
# group data without "split" to avoid memory useage from data duplication
ID_vec<-unique(mydata[[ID]])
merged_ids<-rep(NA, length(ID_vec))
for (i in 1:length(ID_vec)){
j<-1
while(j<nrow(mydata[mydata[[ID]]==ID_vec[i],])){
obs_gap<-mydata[mydata[[ID]]==ID_vec[i],][j+1][[startdate]]-mydata[mydata[[ID]]==ID_vec[i],][j][[enddate]]
if(between(obs_gap,1,gap)){
merged_ids[i]<-(ID_vec[[i]])
mydata[mydata[[ID]]==ID_vec[i],][j][[enddate]]<-mydata[mydata[[ID]]==ID_vec[i],][j+1][[enddate]]
#if row is merged- then add an NA to remove the row in the next step
mydata[mydata[[ID]]==ID_vec[i],][j+1][[startdate]]<-NA
}
j<-j+1}
}
#remove merged rows
mydata<-mydata[complete.cases(mydata[[startdate]])==T, ]
return(mydata, merged_ids)
}
OBSERVATION_PERIODS_merge1<-merge_gap(OBSERVATION_PERIODS, ID="person_id", startdate="op_start_date", enddate="op_end_date", gap=7)
OBSERVATION_PERIODS1 <- CreateSpells(
dataset=OBSERVATION_PERIODS_merge,
id="person_id" ,
start_date = "op_start_date",
end_date = "op_end_date",
overlap = FALSE,
only_overlaps = F
)
View(OBSERVATION_PERIODS1)
View(OBSERVATION_PERIODS1)
table(table(OBSERVATION_PERIODS1$person_id))
unique(OBSERVATION_PERIODS1$person_id)
duplicated(OBSERVATION_PERIODS1)
table(duplicated(OBSERVATION_PERIODS1))
table(duplicated(OBSERVATION_PERIODS1$person_id))
OBS_dup<- OBSERVATION_PERIODS1[duplicated(OBSERVATION_PERIODS1$person_id),]
OBS_dup
View(OBS_dup)
OBS_dup<- OBSERVATION_PERIODS1[!unique(OBSERVATION_PERIODS1$person_id),]
OBS_dup<- OBSERVATION_PERIODS1[unique(OBSERVATION_PERIODS1$person_id)=F,]
!unique(OBSERVATION_PERIODS1$person_id)
View(OBS_dup)
x<-c(124,234,523)
y<-x[max(x)=F]
max(x)
!max(x)
x[x!=max(x)]
OBSERVATION_PERIODS_RECENT<-OBSERVATION_PERIODS1[!duplicated(OBSERVATION_PERIODS1[c("person_id", "entry_spell_category")], fromLast = TRUE), ]
OBSERVATION_PERIODS1[duplicated(OBSERVATION_PERIODS1, person_id),]
OBSERVATION_PERIODS1[duplicated(OBSERVATION_PERIODS1, OBSERVATION_PERIODS1$person_id),]
X<-setDT(OBSERVATION_PERIODS1)[, .SD[which.max(OBSERVATION_PERIODS1$entry_spell_category)],]
View(X)
X<-setDT(OBSERVATION_PERIODS1)[, .SD[which.max(OBSERVATION_PERIODS1$entry_spell_category)],(OBSERVATION_PERIODS1$person_id)]
View(X)
x<-c(124, 124, 124,234,523)
duplicated(x)
duplicated(x, fromLast = TRUE))
duplicated(x, fromLast = TRUE)
duplicated(OBSERVATION_PERIODS1$person_id, fromLast = TRUE)
RECENT<- OBSERVATION_PERIODS1[(duplicated(OBSERVATION_PERIODS1$person_id, fromLast = TRUE)==F),]
View(RECENT)
OBSERVATION_PERIODS_RECENT<- OBSERVATION_PERIODS1[(duplicated(OBSERVATION_PERIODS1$person_id, fromLast = TRUE)==F),]
after_recent<-nrow(OBSERVATION_PERIODS_RECENT)
# X<-setDT(OBSERVATION_PERIODS1)[, .SD[which.max(OBSERVATION_PERIODS1$entry_spell_category)],(OBSERVATION_PERIODS1$person_id)]
# if(length(unique(OBSERVATION_PERIODS$person_id)==nrow(OBSERVATION_PERIODS2))){print("single spell per patient-OK")}
OBSERVATION_PERIODS_RECENT <- OBSERVATION_PERIODS_RECENT[,temp := lapply(.SD, max), by = c("person_id"), .SDcols = "num_spell"][temp == num_spell,][,temp := NULL]
setnames(OBSERVATION_PERIODS_RECENT, "entry_spell_category", "op_start_date")
setnames(OBSERVATION_PERIODS_RECENT, "exit_spell_category", "op_end_date")
OBSERVATION_PERIODS_RECENT[,op_start_date := as.IDate(op_start_date)]
OBSERVATION_PERIODS_RECENT[,op_end_date := as.IDate(op_end_date)]
saveRDS(OBSERVATION_PERIODS_RECENT, file = paste0(std_pop_tmp,"ALL_OBS_SPELLS.rds"))
after <- nrow(OBSERVATION_PERIODS_RECENT)
FlowChartCreateSpells[["Spells_ALL"]]$step <- "01_CreateSpells"
FlowChartCreateSpells[["Spells_ALL"]]$population <- "ALL"
FlowChartCreateSpells[["Spells_ALL"]]$before_merge <- before_merge
FlowChartCreateSpells[["Spells_ALL"]]$before_create_spells <- before_create_spells
FlowChartCreateSpells[["Spells_ALL"]]$after_create_spells <- after_create_spells
FlowChartCreateSpells[["Spells_ALL"]]$after_recent<- after_recent
FlowChartCreateSpells[["Spells_ALL"]]$unique_ID<- length(unique(OBSERVATION_PERIODS$person_id))
ALL_study_population <- readRDS("C:/Users/Acer/OneDrive/Documents/GitHub/LOT4/Level_3_to_be_deployed1.0/g_intermediate/populations/ALL_study_population.rds")
View(ALL_study_population)
