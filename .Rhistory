mask = F
)
TEMP2 <- round(TEMP2*100, digits = 0)
# TEMP2[, Graph := "Relative decline"]
# setnames(TEMP2,"diff_per", "Y")
par(mar = c(4.5,4.5,1,4),mgp = c(3.5,1,0), oma = c(1,1,1,1), xpd = T)
#par(mar=c(5, 4, 4, 4), xpd=TRUE)
#par(mar = c(3.5,3.5,1,0),mgp = c(2.5,1,0), oma = c(1,1,1,1), xpd = T)
Line_plot2(MATRIX =  TEMP2,title = "Relative decline",x.l = "Year_op_start_date", y.l =  "Percentage of lost PY", color = colors, leg = F,l.size = 1.2,tck.size = 1, x.las = 1)
#rm(TEMP2)
TEMP3 <- INPUTMATRIX(
d = COUNT2,
value = "diff_abs",
type = "none",
var = "year",
var.v = years,
cat = "Ageband",
cat.v = stack,
per = F,
#output = "long",
mask = F
)
# TEMP3[, Graph := "Absolute decline"]
# setnames(TEMP3,"diff_abs", "Y")
# TEMP4 <- rbind(TEMP2,TEMP3)
#
# TEMP4[, year := as.numeric(year) ]
#
#
#
#     ggplotly(ggplot(TEMP4, aes(x = year, y = Y, group = Ageband, colour = colors)) +
#              geom_line(aes(color = Ageband)) +
#              geom_point(aes(color = Ageband)) +
#              scale_fill_manual(values=colors) +
#              facet_wrap(~ Graph, ncol=2, scales = "free_y") +
#              ggtitle("") +
#              xlab("Year op_start_date") +
#              ylab("Mean follow up in person years")+
#              theme_classic() +
#              guides(shape = guide_legend(override.aes = list(size = 0.5))) +
#              theme(text=element_text(size = 10),
#                    axis.text.x = element_text(angle = 0, hjust = 1),
#                    axis.title.x = element_text(colour = "#76b82a", margin = margin(2.5,1,1,1)),
#                    axis.title.y = element_text(colour = "#76b82a", margin = margin(1,1,1,12)),
#                    plot.title = element_text(colour = "#76b82a"),
#                    strip.text.y = element_text(angle = 0),
#                    legend.title = element_text(size = 12, face = "bold"),
#                    legend.text = element_text(size = 7))
#              #scale_x_continuous(breaks = unique(TEMP3[["Year"]]), labels = as.character(unique(TEMP3[["Year"]])))
#
#              #scale_y_continuous(limits = c(0,1.1*max(TEMP1[["PY"]])))
#
#            )
#par(mar=c(5, 4, 4, 4), xpd=TRUE)
#par(mar = c(3.5,3.5,1,0),mgp = c(2.5,1,0), oma = c(1,1,1,1), xpd = T)
Line_plot2(MATRIX =  TEMP3,title = "Absolute decline",x.l = "Year_op_start_date", y.l =  "Lost PY",color = colors,leg = F,l.size = 1.2,tck.size = 1,x.las = 1)
legend("right",inset = c(-0.1,1, 0),title = "Agebands",legend =  stack, col = colors, cex = 0.8,pch=10, box.col = "white")
rm(COUNT2,TEMP3)
rm(TEMP,years,colors,stack)
} else {
print("This table has no information and cannot be displayed.")
}
#TEMP <- readRDS(paste0(thisdir,"/g_intermediate/STUDYPOP_DIS_ALL.rds"))
TEMP <- fread(paste0(report_dir2,"/",i,"_R_01_03_STUDYPOP.csv"), sep = ";")
if (nrow(TEMP)>0){
datatable(TEMP,
#options =
#list(
#list(pageLength = 5),
#scrollX=T,
#autoWidth = T,
#colReorder = F,
#columnDefs = list(
#  list(width = '20px', targets = c(0:ncol(TEMP)-1)),
#  list(className = "dt-center", targets = "_all")
#
#  )
#),
rownames = F,
escape = 1
)
rm(TEMP)
} else {
print("This table has no information and cannot be displayed.")
}
TEMP <- fread(paste0(report_dir2,"/",i,"_R_01_03_STUDYPOP.csv"), sep = ";")
if(nrow(TEMP) > 0) {
TEMP<-TEMP[Ageband != "Total",]
years <- c(min(TEMP[["Year"]]):max(TEMP[["Year"]]))
stack <- unique(TEMP[["Ageband"]])
colors <- colorRamps::matlab.like(length(stack))
TEMP1 <- INPUTMATRIX(
d = TEMP,
value = "Mean Male",
type = "none",
var = "Year",
var.v = years,
cat = "Ageband",
cat.v = stack,
per = F,
mask = F
#output = "long"
)
# TEMP1[, Graph := "Male"]
# setnames(TEMP1,"Mean Male","Mean")
par(mar = c(4.5,4.5,1,4),mgp = c(3.5,1,0), oma = c(1,1,1,1), xpd = T)
Line_plot2(
MATRIX = TEMP1,
title = "Male",
x.l = "Year start follow up",
y.l = "Mean follow up in person years ",
leg = F,
color = colors,
l.size = 1.2,
tck.size = 1,
x.las = 1
)
TEMP2 <- INPUTMATRIX(
d = TEMP,
value = "Mean Female",
type = "none",
var = "Year",
var.v = years,
cat = "Ageband",
cat.v = stack,
per = F,
mask = F
#output = "long"
)
#TEMP2[, Graph := "Female"]
#setnames(TEMP2,"Mean Female","Mean")
#par(mar = c(3.5,3.5,1,4),mgp = c(2.5,1,0), oma = c(1,1,1,1), xpd = T)
Line_plot2(
MATRIX = TEMP2,
title = "Female",
x.l = "Year start follow up",
y.l = "Mean follow up in person years ",
leg = T,
color = colors,
l.size = 1.2,
tck.size = 1,
x.las = 1
)
# TEMP3 <- rbind(TEMP1,TEMP2)
#
# TEMP3[, Year := as.numeric(Year) ]
#
#
#
#     ggplotly(ggplot(TEMP3, aes(x = Year, y = Mean, group = Ageband)) +
#              geom_line(aes(color = Ageband)) +
#              geom_point(aes(color = Ageband)) +
#              facet_wrap(~ Graph, ncol=2, scales = "fixed") +
#              ggtitle("") +
#              xlab("Year op_start_date") +
#              ylab("Mean follow up in person years")+
#              theme_classic() +
#              guides(shape = guide_legend(override.aes = list(size = 0.5))) +
#              theme(text=element_text(size = 10),
#                    axis.text.x = element_text(angle = 0, hjust = 1),
#                    axis.title.x = element_text(colour = "#76b82a"),
#                    axis.title.y = element_text(colour = "#76b82a"),
#                    plot.title = element_text(colour = "#76b82a"),
#                    strip.text.y = element_text(angle = 0),
#                    legend.title = element_text(size = 12, face = "bold"),
#                    legend.text = element_text(size = 7))
#              #scale_x_continuous(breaks = unique(TEMP3[["Year"]]), labels = as.character(unique(TEMP3[["Year"]])))
#
#              #scale_y_continuous(limits = c(0,1.1*max(TEMP1[["PY"]])))
#
#            )
#
rm(TEMP,TEMP1,TEMP2, years, stack,colors)
}else{rm(TEMP)
}
TEMP <- fread(paste0(report_dir2,"/",i,"_R_01_04_STUDYPOPPY.csv"), sep = ";")
#TEMP <- readRDS(paste0(thisdir,"/g_intermediate/STUDYPOP_PY_ALL.rds"))
if(nrow(TEMP)>0){
datatable(TEMP, options = list(scrollX=T))
rm(TEMP)
} else {
print("This table has no information and cannot be displayed.")
}
TEMP <- fread(paste0(report_dir1,"/",i,"_R_01_04_STUDYPOPPY.csv"), sep = ";")
if(nrow(TEMP) > 0) {
TEMP<-TEMP[Ageband != "Total",]
years <- c(min(TEMP[,Year]):max(TEMP[,Year]))
stack <- unique(TEMP[["Ageband"]])
colors <- colorRamps::matlab.like(length(stack))
TEMP1 <- INPUTMATRIX(
d = TEMP,
value = "PY Male",
type = "none",
var = "Year",
var.v= years,
cat = "Ageband" ,
cat.v = stack ,
per = F,
perdir = "col"
)
TEMP2 <- INPUTMATRIX(
d = TEMP,
value = "PY Female",
type = "none",
var = "Year",
var.v= years,
cat = "Ageband" ,
cat.v = stack ,
per = F,
perdir = "col"
)
par(mar=c(5, 4, 4, 4), xpd=TRUE)
barplot(TEMP1,main = "Male",xlab = "Year", ylab = "Personyears"  , col = colors)
barplot(TEMP2,main = "Female",xlab = "Year", ylab = "Personyears"  , col = colors)
legend("right",inset = c(-0.1,1, 0),title = "Agebands",legend =  unique(TEMP[,Ageband]), col = colors, cex = 0.8,pch=10, box.col = "white")
rm(TEMP,TEMP1,TEMP2,years,stack,colors)
}else{rm(TEMP)}
TEMP <- fread(paste0(report_dir2,"/",i,"_R_01_05_STUDYPOPPY2.csv"), sep = ";")
#TEMP <- readRDS(paste0(thisdir,"/g_intermediate/STUDYPOP_PY2_ALL.rds"))
if(nrow(TEMP)>0){
datatable(TEMP, options = list(scrollX=T))
rm(TEMP)
} else {
print("This table has no information and cannot be displayed.")
}
#{r echo=F,fig.width=8,fig.height=5}
TEMP <- fread(paste0(report_dir1,"/",i,"_R_01_05_STUDYPOPPY2.csv"))
if(nrow(TEMP) > 0) {
TEMP <- TEMP[, ':=' (Year = as.numeric(Year), Month = as.numeric(Month)) ]
setorderv(TEMP,c("Year","Month"))
TEMP <- TEMP[, X := paste0(Year," - ",Month)  ]
TEMP1 <- melt(TEMP,id.vars = "X", measure.vars = c("PY Male","PY Female"),variable.name = "Gender",value.name = "PY")[,":=" (X = as.character(X), Gender = as.character(Gender),PY = as.numeric(PY))]
TEMP1 <- INPUTMATRIX(
d = TEMP1,
value = "PY",
type = "none",
var = "X",
var.v = paste0(sort(rep(min(TEMP[["Year"]]):max(TEMP[["Year"]]),12))," - ", rep(1:12,max(TEMP[["Year"]])-min(TEMP[["Year"]]))),
cat = "Gender",
cat.v = c("PY Male","PY Female"),
per = F,
#output = "long"
)
#x.th <- c(1:length(colnames(TEMP1)) + 1)[substr(colnames(TEMP1),8,10) == "1"]
#x.lab <-substr(colnames(TEMP1)[substr(colnames(TEMP1),8,10) == "1"],1,4)
x.lab = substr(colnames(TEMP1)[substr(colnames(TEMP1),8,10) == "1"],1,4)
x.th = c(1:length(colnames(TEMP1)))[substr(colnames(TEMP1),8,10) == "1"]
x.th<- c(x.th,length(colnames(TEMP1)))
x.lab <- c(x.lab,as.character(as.numeric(substr(colnames(TEMP1)[length(colnames(TEMP1))],1,4))+1))
#x.thicks <- unique(TEMP1[["X"]])[substr(unique(TEMP1[["X"]]),8,9) == "1"]
#x.labels <- substr(x.thicks,1,4)
# TEMP1[Gender == "PY Female", Gender := "Female"]
# TEMP1[Gender == "PY Male", Gender := "Male"]
#
#   ggplotly(ggplot(TEMP1, aes(x = X, y = PY, group = Gender)) +
#              geom_line(aes(color = Gender)) +
#              geom_point(aes(color = Gender)) +
#              #facet_wrap(~ meaning, ncol=2, scales = "fixed") +
#              ggtitle("") +
#              xlab("Year") +
#              ylab("PY")+
#              theme_classic() +
#              guides(shape = guide_legend(override.aes = list(size = 0.3))) +
#              theme(text=element_text(size = 10),
#                    axis.text.x = element_text(angle = 90, hjust = 1),
#                    axis.title.x = element_text(colour = "#76b82a"),
#                    axis.title.y = element_text(colour = "#76b82a"),
#                    plot.title = element_text(colour = "#76b82a"),
#                    strip.text.y = element_text(angle = 0),
#                    legend.title = element_text(size = 7),
#                    legend.text = element_text(size = 7)) +
#              scale_x_discrete(breaks = x.thicks, labels = x.labels)
#              #scale_y_continuous(limits = c(0,1.1*max(TEMP1[["PY"]])))
#
#            )
#par(mar=c(5, 4, 4, 4), xpd=TRUE)
par(mar = c(5,4,4,4),mgp = c(3,1,0), oma = c(1,1,1,3), xpd = T)
Line_plot2(
MATRIX = TEMP1,
title = "",
x.l = "Year",
y.l = "PY",
col = c("blue","red"),
x.axis = T,
x.labels = x.lab,
x.thicks = x.th,
x.las = 1,
l.size = 1.2,
tck.size = 1
)
rm(TEMP,TEMP1)
}else{rm(TEMP)}
TEMP <- readRDS(paste0(report_dir1,"/",i,"_R_01_10_InDatabaseAtAfterBirth.rds"))
if (nrow(TEMP)>0){
datatable(TEMP, options = list(scrollX=T), rownames = F)
}else {
print("This table has no information and cannot be displayed.")
}
if(nrow(TEMP) > 0) {
par(mar = c(4.5,4.5,1,4),mgp = c(3.5,1,0), oma = c(1,1,1,1), xpd = T)
Line_plot2(
MATRIX = TEMP,
title = "",
x.l = "Weeks",
y.l = "Percentage",
x.axis = T,
x.thicks = seq(from = 0, to = ncol(TEMP), by = 100),
x.labels = seq(from = 0, to = ncol(TEMP), by = 100),
x.las = 1,
l.size = 1.2,
tck.size = 1,
leg = F
)
}
rm(TEMP)
TEMP <- fread(paste0(report_dir2,"/",i,"_R_01_11_InDatabaseDuration.csv"), sep = ";")
if(nrow(TEMP)>0){
TEMP <- TEMP[get("Distance in months") == "Median",][,"Distance in months" := NULL][,"%" := NULL]
setnames(TEMP,"No","Median distance in months")
datatable(TEMP, options = list(scrollX=T), rownames = F)
rm(TEMP)
TEMP <- fread(paste0(report_dir1,"/",i,"_R_01_11_InDatabaseDuration.csv"), sep = ";")
TEMP <- TEMP[get("Distance in months") == "Median",][,"Distance in months" := NULL][,"%" := NULL]
} else {
print("This table has no information and cannot be displayed.")
}
if(nrow(TEMP) > 0) {
TEMP2 <- INPUTMATRIX(
d = TEMP,
value = "No",
type = "none",
var = "Year of birth",
var.v = c(min(TEMP[["Year of birth"]]):max(TEMP[["Year of birth"]])),
per = F
)
#par(mar = c(3,3,1,4),mgp = c(2,1,0), oma = c(1,1,1,1), xpd = T)
par(mar = c(4.5,4.5,1,4),mgp = c(3.5,1,0), oma = c(1,1,1,1), xpd = T)
Line_plot2(
MATRIX = TEMP2,
title = "",
x.l = "Year of birth",
y.l = "Median in months",
leg = F,
x.las = 1,
l.size = 1.2,
tck.size = 1
)
}
#rm(TEMP,TEMP2)
#Create report
for(i in readRDS(paste0(std_pop_tmp,"SCHEME_06.rds"))[["subpopulations"]]){
if(SUBP) {
report_dir1 <- paste0(std_source_pop_dir,i)
report_dir2 <- paste0(std_source_pop_dir,i,"/Masked")
}else{
report_dir1 <- substr(std_source_pop_dir,1,nchar(std_source_pop_dir)-1)
report_dir2 <- paste0(std_source_pop_dir,"Masked")
}
rmarkdown::render(paste0(pre_dir,"Report_01_StudyPopulation.Rmd"),
output_file = paste0(report_dir1,"/","Report_01_Study_population_",i,".html"),
output_dir = report_dir1
)
rmarkdown::render(paste0(pre_dir,"Report_02_Dates.Rmd"),
output_file = paste0(report_dir1,"/","Report_02_Dates_",i,".html"),
output_dir = report_dir1
)
rmarkdown::render(paste0(pre_dir,"Report_03_VisitsLifestyle.Rmd"),
output_file = paste0(report_dir1,"/","Report_03_VisitsLifestyle_",i,".html"),
output_dir = report_dir1
)
rm(report_dir1,report_dir2)
}
ALL_study_population <- readRDS("H:/Test_L3/Data characterisation/Level_3_to_be_deployed1.0/g_intermediate/populations/ALL_study_population.rds")
View(ALL_study_population)
View(ALL_study_population)
#TEMP <- readRDS(paste0(thisdir,"/g_intermediate/STUDYPOP_DIS_ALL.rds"))
TEMP <- fread(paste0(report_dir2,"/",i,"_R_01_03_STUDYPOP.csv"), sep = ";")
rm(list=ls())
if(!require(rstudioapi)){install.packages("rstudioapi")}
library(rstudioapi)
projectFolder<-dirname(rstudioapi::getSourceEditorContext()$path)
setwd(projectFolder)
########################################################################################################################
#Specify all meanings that refer to birth registry in the SURVEY_ID table(if applicable) for identifying pregnancy
########################################################################################################################
#example meanings_birth_registry<-c("birth_registry", "birth_registry_meanings")
#keep in mind this records will be classified as end_of_pregnancy so no spontaneous abortion registry should be included
meanings_birth_registry<-c("birth_registry_mother")
########################################################################################################################
#Specify all variables of interest to generate the Lifestyle report
########################################################################################################################
#Variables of interest:Smoking, Folic acid use, Alcohol abuse, BMI, SES
#1.Identify the CDM table you used to save the information about the variables of interest.
#2.Identify the original name of the variable of interest.
#3.Use the information above to complete the list below.
#4.CDM_table:name of the CDM table where you saved the information.
#5.CDM_column: name of the CDM column where you saved the information about the name of the variable of interest.
#6.value: name of the original variable.
#7.c.voc: name of the CDM column where you saved the vocabulary representing the variable of interest.If no vocabulary fill NULL
#8.v.voc: the vocabulary used for the variable of interest.If no vocabulary fill NULL
#9.v.date: name of the CDM column which saves the date of recording.
#10.If you don't have information about a variable then delete that section and use Lifestyle <- list()
#example BMI(saved in MEDICAL_OBSERVATIONS, original name: body_mass_index, unit:kg/m2)
#  BMI = list(
#    CDM_table = "MEDICAL_OBSERVATIONS",
#    CDM_column = "mo_source_column",
#    value = "body_mass_index",
#    c.voc = "mo_record_vocabulary",
#    v.voc = "ICD9",
#    v.date = "mo_date"
#  )
#Smoking = list(
#  CDM_table = "SURVEY_OBSERVATIONS",
#  CDM_column = "so_source_column",
#  value = c("SMOKING","SMOKESEV"),
#  c.voc = NULL,
#  v.voc = NULL,
#  v.date = "so_date"
#)
Lifestyle <- list()
# Lifestyle <- list(
#   Smoking = list(
#     CDM_table = "",
#     CDM_column = "",
#     value = "",
#     c.voc = "",
#     v.voc = "",
#     v.date = ""
#   ),
#   Folic_acid = list(
#     CDM_table = "",
#     CDM_column = "",
#     value = "",
#     c.voc = "",
#     v.voc = "",
#     v.date = ""
#   ),
#   Alcohol = list(
#     CDM_table = "",
#     CDM_column = "",
#     value = "",
#     c.voc = "",
#     v.voc = "",
#     v.date = ""
#   ),
#   BMI = list(
#     CDM_table = "",
#     CDM_column = "",
#     value = c(""),
#     c.voc = "" ,
#     v.voc = "",
#     v.date = ""
#   ),
#   SES = list(
#     CDM_table = "",
#     CDM_column = "",
#     value = c(""),
#     c.voc = "" ,
#     v.voc = "",
#     v.date = ""
#   )
# )
###############################################
source("packages.R")
source("99_path.R")
source(paste0(pre_dir, "info.R"))
source(paste0(pre_dir,"study_parameters.R"))
setwd(projectFolder)
#################################################
#Study_source_population
#################################################
system.time(source(paste0(pre_dir,"study_source_population_script.R")))
#Create report
for(i in readRDS(paste0(std_pop_tmp,"SCHEME_06.rds"))[["subpopulations"]]){
if(SUBP) {
report_dir1 <- paste0(std_source_pop_dir,i)
report_dir2 <- paste0(std_source_pop_dir,i,"/Masked")
}else{
report_dir1 <- substr(std_source_pop_dir,1,nchar(std_source_pop_dir)-1)
report_dir2 <- paste0(std_source_pop_dir,"Masked")
}
rmarkdown::render(paste0(pre_dir,"Report_01_StudyPopulation.Rmd"),
output_file = paste0(report_dir1,"/","Report_01_Study_population_",i,".html"),
output_dir = report_dir1
)
rmarkdown::render(paste0(pre_dir,"Report_02_Dates.Rmd"),
output_file = paste0(report_dir1,"/","Report_02_Dates_",i,".html"),
output_dir = report_dir1
)
rmarkdown::render(paste0(pre_dir,"Report_03_VisitsLifestyle.Rmd"),
output_file = paste0(report_dir1,"/","Report_03_VisitsLifestyle_",i,".html"),
output_dir = report_dir1
)
rm(report_dir1,report_dir2)
}
if(!require(rstudioapi)){install.packages("rstudioapi")}
library(rstudioapi)
projectFolder<-dirname(rstudioapi::getSourceEditorContext()$path)
setwd(projectFolder)
###############################################
source("packages.R")
source("99_path.R")
source(paste0(pre_dir, "info.R"))
path_dir
projectFolder<-dirname(rstudioapi::getSourceEditorContext()$path)
projectFolder<-dirname(rstudioapi::getSourceEditorContext()$path)
setwd(projectFolder)
source("99_path.R")
path_dir
source("99_path.R")
source(paste0(pre_dir, "info.R"))
dir_base
