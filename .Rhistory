#               input:  data in csv with 1 row per event [confirm folder]
#                       assumes doses in separate columns
#               output: table2, table3, log [confirm folder]
# Housekeeping  -----------------------------------------------------------
# install and load packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse, data.table, here, SCCS, gtsummary, ggplot2, survivalAnalysis)
# save output and error message as a log *sink to be entered
# Import Data -------------------------------------------------------------
# need to confirm folder structure and input data format
# input <- fread(here::here("datafolder","inputdata"), data.table = FALSE, na.strings = "")
# in the interim use data from SCCS package and rename variables as applicable
sample_data <- SCCS::dtpdat
sample_data <- sample_data %>%
rename(study_start = sta,
censor = end,
myocarditis = conv,
vaccd1 = dtp,
vaccd3 = dtpd2) %>%
select(-c(dtpd3,sex)) %>%
# all times anticipated to be relative to study start
mutate(across(c(study_start, censor, myocarditis, vaccd1, vaccd3), ~ .x - study_start)) %>%
# negative days assumed to be due to random data generation and filtered out (confirm, seems odd)
filter(vaccd1 > 0) %>%
# make vaccine dates slightly greater to fit pre-exposure window in our analyses
mutate(across(c(vaccd1, vaccd3), ~.x + 90))
# Data Management ---------------------------------------------------------
# some data management required before fitting model
# should add controls for variable type here when dummy data received
# need to consider if risk windows will be split further
# Levels of interest:
# 0 - Control Window
# 1 - Pre-exposure window
# 2 - Day 0 Dose 1
# 3 - Dose 1 Risk Window
# 4 - Time between Dose 1 and 2
# 5 - Day 0 Dose 2
# 6 - Dose 2 Risk Window
# note; assume convention is negative days are exclusive, positive inclusive
tidy_data <- sample_data %>%
# start of control window
mutate(start_control = vaccd1 - 91) %>%
# start of pre-exposure window
mutate(vaccd = vaccd1 - 31) %>%
# start of washout
mutate(vaccd2 = vaccd1 + 28) %>%
# constrain end to be end of second risk window
mutate(end_risk = case_when(!is.na(vaccd3) ~ vaccd3 + 28,
TRUE ~ vaccd1 + 28)) %>%
rowwise %>%
mutate(end_study = min(end_risk, censor)) %>%
ungroup() %>%
# keep those with events
filter(myocarditis >= start_control & myocarditis <= end_study)
# create a vector which is every 30 days since study start until end (last week not complete)
# note 60 day in dummy data to ensure convergence, need to investigate
min_start <- min(tidy_data$start_control)
max_end <- max(tidy_data$end_study)
calendar_time <- seq(from = min_start+60, to = max_end, by = 60)
# Descriptives ------------------------------------------------------------
# format data to check length of intervals and nr of events per interval
# need to double check interval specification, have assumed adrug specification is inclusive, aedrug exclusive
# unclear why final risk windows ends up 29 days; may be clearer to specify all these in variables...
sccs_data <- formatdata(indiv = case,
astart = start_control,
aend = end_study,
aevent = myocarditis,
adrug = cbind(vaccd, vaccd1-1, vaccd1, vaccd2, vaccd3-1, vaccd3),
aedrug = cbind(vaccd1-1, vaccd1, vaccd1+28, vaccd3-1, vaccd3, vaccd3+28),
dataformat = "multi",
sameexpopar = F,
data = tidy_data)
# check interval distribution and event nr per interval
interval_distribution <- sccs_data %>%
select(vaccd, interval, event) %>%
tbl_summary(by = vaccd,
type = all_continuous() ~ "continuous2",
statistic = list(all_continuous() ~ c("{median} ({p25}, {p75})",
"{min}, {max}"),
all_categorical() ~ "{n}")) %>%
modify_header(stat_by = "**{level}**")
# need to either print to move code to markdown, print to console or export
interval_distribution
# Unadjusted Analyses -----------------------------------------------------
# precedence given to most recent risk interval - default when data is in wide ("multi") format
myocard.mod1 <- standardsccs(event ~ vaccd,
indiv = case,
astart = start_control,
aend = end_study,
aevent = myocarditis,
adrug = cbind(vaccd, vaccd1-1, vaccd1, vaccd2, vaccd3-1, vaccd3),
aedrug = cbind(vaccd1-1, vaccd1, vaccd1+28, vaccd3-1, vaccd3, vaccd3+28),
dataformat = "multi",
sameexpopar = F,
data = tidy_data)
myocard.mod1
# extract relevant results and components for meta-analysis from object
output.mod1 <- survivalAnalysis::cox_as_data_frame(myocard.mod1)
output.meta.mod1 <- as.data.frame(myocard.mod1$coefficients)
# Adjusted Analyses -------------------------------------------------------
# Note - calendar time adjustment is added through a variable called age in this function, as per Farrington et al 2019.
myocard.mod2 <- standardsccs(event ~ vaccd + age,
indiv = case,
astart = start_control,
aend = end_study,
aevent = myocarditis,
adrug = cbind(vaccd, vaccd1-1, vaccd1, vaccd2, vaccd3-1, vaccd3),
aedrug = cbind(vaccd1-1, vaccd1, vaccd1+28, vaccd3-1, vaccd3, vaccd3+28),
agegrp = calendar_time,
dataformat = "multi",
sameexpopar = F,
data = tidy_data)
myocard.mod2
# extract relevant results and components for meta-analysis from object
output.mod2 <- survivalAnalysis::cox_as_data_frame(myocard.mod2)
output.meta.mod2 <- as.data.frame(myocard.mod2$coefficients)
# Format and Output Results  ----------------------------------------------
# placeholder - need to format outputs, merge in event counts (don't think this is in model output)
# placeholder - need to apply redaction to small N
output.meta.mod1 <- output.meta.mod1 %>%
rename(yi = `exp(coef)`,
sei = `se(coef)`) %>%
select(yi, sei) %>%
mutate(
ncase = myocard.mod1$nevent,
nevent = myocard.mod1$nevent,
dlab = 1,
vaccine_dose = c(1,2,3,4,5,6),
vaccine_brand = "moderna",
subset ="all"
)
write.csv(output.meta.mod1, "output.meta.mod1.csv", row.names = FALSE)
# Sensitivity Analyses ----------------------------------------------------
## PLACEHOLDER - WHICH ONES TO PRIORITISE
# send output back to screen
sink()
sink(type="message")
ggplot(df, aes(x = (tidy_data$myocarditis-tidy_data$vaccd))) +
geom_histogram(aes(color = category, fill = category),
position = "identity", binwidth = 7, alpha = 0.9)
ggplot(tidy_data, aes(x = (tidy_data$myocarditis-tidy_data$vaccd))) +
geom_histogram(aes(color = category, fill = category),
position = "identity", binwidth = 7, alpha = 0.9)
ggplot(tidy_data, aes(x = (tidy_data$myocarditis-tidy_data$vaccd))) +
geom_histogram(position = "identity", binwidth = 7, alpha = 0.9)
ggplot(tidy_data, aes(x = (myocarditis-vaccd))) +
geom_histogram(binwidth = 7, alpha = 0.9)
ggplot(tidy_data, aes(x = (myocarditis-vaccd))) +
geom_histogram(binwidth = 7, alpha = 0.9)+
geom_vline(0)
ggplot(tidy_data, aes(x = (myocarditis-vaccd))) +
geom_histogram(binwidth = 7, alpha = 0.9)+
geom_vline(xintercept =0)
ggplot(tidy_data, aes(x = (myocarditis-vaccd))) +
geom_histogram(binwidth = 7, alpha = 0.9)+
geom_vline(xintercept =0, linetype="dotted", size=2)
ggplot(tidy_data, aes(x = (myocarditis-vaccd))) +
geom_histogram(binwidth = 7, alpha = 0.9)+
geom_vline(xintercept =0, size=2)
ex_cat<-list((-100:-31), (-31:0), (0:30), (31:60), (61:100), (100:500))
ex_cat
gplot(tidy_data, aes(x = (myocarditis-vaccd))) +
geom_histogram(binwidth = 7, alpha = 0.9, color=ex_cat)+
geom_vline(xintercept =0, linetype="dotted", size=1.5)
ggplot(tidy_data, aes(x = (myocarditis-vaccd))) +
geom_histogram(binwidth = 7, alpha = 0.9, color=ex_cat)+
geom_vline(xintercept =0, linetype="dotted", size=1.5)
ex_cat<-as.factor((-100:-31), (-31:0), (0:30), (31:60), (61:100), (100:500))
ex_cat<-as.factor(c((-100:-31), (-31:0), (0:30), (31:60), (61:100), (100:500)))
ex_cat
hist(tidy_data$myocarditis-tidy_data$vaccd, breaks=(max(tidy_data$myocarditis-tidy_data$vaccd)-(min(tidy_data$myocarditis-tidy_data$vaccd))/7), col = ifelse(x < 0,'red','green'))
hist(tidy_data$myocarditis-tidy_data$vaccd, breaks=(max(tidy_data$myocarditis-tidy_data$vaccd)-(min(tidy_data$myocarditis-tidy_data$vaccd))/7), col = ifelse( (tidy_data$myocarditis-tidy_data$vaccd)< 0,'red','green'))
time_from_exp<- tidy_data$myocarditis-tidy_data$vaccd
hist(time_from_exp, breaks=50)
hist(time_from_exp, breaks=50)
hist(time_from_exp, breaks=50, col=(ifelse (time_from_exp<=0, 2,5)))
df<-as.data.frame(time_from_exp)
df$category[df$time_from_exp < -30] <- "unexposed"
df$category[df$time_from_exp>= -31 & df$time_from_exp <0] <- "burn in"
df$category[df$time_from_exp>= 0 & df$time_from_exp <=30] <- "0-30 days"
df$category[df$time_from_exp>= 31 & df$time_from_exp <=60] <- "31-60 days"
df$category[df$time_from_exp>= 61 & df$time_from_exp <=100] <- "61-100 days"
df$category[df$time_from_exp >= 101] <- "unexposed"
ggplot(df, aes(x = time_from_exp)) +
geom_histogram(aes(color = category, fill = category),
position = "identity", binwidth=7, alpha = 0.9)
df$category[df$time_from_exp < -30] <- "unexposed"
df$category[df$time_from_exp>= -31 & df$time_from_exp <=0] <- "burn in"
df$category[df$time_from_exp> 0 & df$time_from_exp <=30] <- "0-30 days"
df$category[df$time_from_exp>= 31 & df$time_from_exp <=60] <- "31-60 days"
df$category[df$time_from_exp>= 61 & df$time_from_exp <=100] <- "61-100 days"
df$category[df$time_from_exp >= 101] <- "unexposed"
ggplot(df, aes(x = time_from_exp)) +
geom_histogram(aes(color = category, fill = category),
position = "identity", binwidth=7, alpha = 0.9)
ggplot(df, aes(x = time_from_exp)) +
geom_histogram(aes(color = category, fill = category),
position = "identity", binwidth=7, alpha = 0.5)
df$category[df$time_from_exp < -30] <- "unexposed"
df$category[df$time_from_exp> -31 & df$time_from_exp <=0] <- "burn in"
df$category[df$time_from_exp> 1 & df$time_from_exp <=30] <- "0-30 days"
df$category[df$time_from_exp> 31 & df$time_from_exp <=60] <- "31-60 days"
df$category[df$time_from_exp> 61 & df$time_from_exp <=100] <- "61-100 days"
df$category[df$time_from_exp > 101] <- "unexposed"
#use color coding to show which risk window events belong to
ggplot(df, aes(x = time_from_exp)) +
geom_histogram(aes(color = category, fill = category),
position = "identity", binwidth=7, alpha = 0.5)
df$category[df$time_from_exp < -30] <- "unexposed"
df$category[df$time_from_exp> -31 & df$time_from_exp <0] <- "burn in"
df$category[df$time_from_exp> 1 & df$time_from_exp <30] <- "0-30 days"
df$category[df$time_from_exp> 31 & df$time_from_exp <60] <- "31-60 days"
df$category[df$time_from_exp> 61 & df$time_from_exp <100] <- "61-100 days"
df$category[df$time_from_exp > 101] <- "unexposed"
#use color coding to show which risk window events belong to
ggplot(df, aes(x = time_from_exp)) +
geom_histogram(aes(color = category, fill = category),
position = "identity", binwidth=7, alpha = 0.5)
df$category[df$time_from_exp < -30] <- "unexposed"
df$category[df$time_from_exp> -31 & df$time_from_exp <0] <- "burn in"
df$category[df$time_from_exp> 1 & df$time_from_exp <30] <- "0-30 days"
df$category[df$time_from_exp> 31 & df$time_from_exp <60] <- "31-60 days"
df$category[df$time_from_exp> 61 & df$time_from_exp <100] <- "61-100 days"
df$category[df$time_from_exp > 101] <- "unexposed"
#use color coding to show which risk window events belong to
ggplot(df, aes(x = time_from_exp)) +
geom_histogram(aes(color = category, fill = category),
position = "identity", binwidth=1, alpha = 0.5)
+
geom_vline(xintercept =0, linetype="dotted", size=1.5)
ggplot(df, aes(x = time_from_exp)) +
geom_histogram(aes(color = category, fill = category),
position = "identity", binwidth=1, alpha = 0.5)+
geom_vline(xintercept =0, linetype="dotted", size=1.5)
df$category[df$time_from_exp =< -30] <- "unexposed"
df$category[df$time_from_exp> -31 & df$time_from_exp =<0] <- "burn in"
df$category[df$time_from_exp> 1 & df$time_from_exp =<30] <- "0-30 days"
df$category[df$time_from_exp> 31 & df$time_from_exp =<60] <- "31-60 days"
df$category[df$time_from_exp> 61 & df$time_from_exp =<100] <- "61-100 days"
df$category[df$time_from_exp => 101] <- "unexposed"
#use color coding to show which risk window events belong to
ggplot(df, aes(x = time_from_exp)) +
geom_histogram(aes(color = category, fill = category),
position = "identity", binwidth=1, alpha = 0.5)+
geom_vline(xintercept =0, linetype="dotted", size=1.5)
ggplot(df, aes(x = time_from_exp)) +
geom_histogram(scale_colour_manual(name = 'time_from_exp > 0', values = setNames(c('red','green'),c(T, F)), binwidth=1)
ggplot(df, aes(x = time_from_exp)) +
geom_histogram(scale_colour_manual(name = 'time_from_exp > 0', values = setNames(c('red','green'),c(T, F)), binwidth=1))
geom_histogram(scale_colour_manual(name = 'time_from_exp > 0', values = setNames(c('red','green'),c(T, F)))
ggplot(df, aes(x = time_from_exp)) +
geom_histogram(scale_colour_manual(name = 'time_from_exp > 0', values = setNames(c('red','green'),c(T, F)))
ggplot(df, aes(x = time_from_exp)) +
geom_histogram(aes(color = time_from_exp>0),
position = "identity", binwidth=1, alpha = 0.5)+
geom_vline(xintercept =0, linetype="dotted", size=1.5)
ggplot(df, aes(x = time_from_exp)) +
geom_histogram(aes(color = time_from_exp>0),
position = "identity", binwidth=1, alpha = 0.5)+
geom_vline(xintercept =0, linetype="dotted", size=1.5)
ggplot(df, aes(x = time_from_exp)) +
geom_density(aes(color = time_from_exp>0),
position = "identity", binwidth=1, alpha = 0.5)+
geom_vline(xintercept =0, linetype="dotted", size=1.5)
ggplot(df, aes(x = time_from_exp)) +
geom_histogram(aes(color = ifelse(time_from_exp>-30, "grey", "red")),
position = "identity", binwidth=1, alpha = 0.5)+
geom_vline(xintercept =0, linetype="dotted", size=1.5)
df$category[df$time_from_exp =< -30] <- "control period"
df$category[df$time_from_exp> -31 & df$time_from_exp =<0] <- "buffer period"
df$category[df$time_from_exp> 1 & df$time_from_exp =<30] <- "risk period 1"
df$category[df$time_from_exp> 31 & df$time_from_exp =<60] <- "risk period 2"
df$category[df$time_from_exp> 61 & df$time_from_exp =<100] <- "risk period 3"
df$category[df$time_from_exp => 101] <- "control period"
df$category[df$time_from_exp =< -30]
df$category[df$time_from_exp = -30] <- "control period"
time_from_exp<- tidy_data$myocarditis-tidy_data$vaccd
df<-as.data.frame(time_from_exp)
df$category[df$time_from_exp =< -30] <- "unexposed"
df$category[df$time_from_exp> -31 & df$time_from_exp =<0] <- "burn in"
df$category[df$time_from_exp> 1 & df$time_from_exp =<30] <- "0-30 days"
df$category[df$time_from_exp> 31 & df$time_from_exp =<60] <- "31-60 days"
df$category[df$time_from_exp> 61 & df$time_from_exp =<100] <- "61-100 days"
df$category[df$time_from_exp => 101] <- "unexposed"
ggplot(df, aes(x = time_from_exp)) +
geom_histogram(aes(color = category, fill = category),
position = "identity", binwidth=1, alpha = 0.5)+
geom_vline(xintercept =0, linetype="dotted", size=1.5)
df$category[df$time_from_exp =< -30] <- "unexposed"
df$category[df$time_from_exp < -30] <- "unexposed"
df$category[df$time_from_exp>= -31 & df$time_from_exp =<0] <- "burn in"
time_from_exp<- tidy_data$myocarditis-tidy_data$vaccd
df<-as.data.frame(time_from_exp)
df$category[df$time_from_exp < -30] <- "unexposed"
df$category[df$time_from_exp>= -31 & df$time_from_exp =<0] <- "burn in"
df$category[df$time_from_exp> 1 & df$time_from_exp =<30] <- "0-30 days"
df$category[df$time_from_exp> 31 & df$time_from_exp =<60] <- "31-60 days"
df$category[df$time_from_exp> 61 & df$time_from_exp =<100] <- "61-100 days"
df$category[df$time_from_exp => 101] <- "unexposed"
ggplot(df, aes(x = time_from_exp)) +
geom_histogram(aes(color = category, fill = category),
position = "identity", binwidth=1, alpha = 0.5)+
geom_vline(xintercept =0, linetype="dotted", size=1.5)
ggplot(df, aes(x = time_from_exp[time_from_exp<0])) +
geom_histogram(aes(color = "red", fill = "red"),
position = "identity", binwidth=1, alpha = 0.5)+
geom_vline(xintercept =0, linetype="dotted", size=1.5)
time_from_exp[time_from_exp<0]
ggplot(df, aes(x = time_from_exp[time_from_exp<0])) + geom_histogram()
hist(time_from_exp[time_from_exp<0])
hist_unex<-hist(time_from_exp[time_from_exp<0],col="grey")
(round(e-b)/7),1)
(round(e-b)/7)1)
b <- min(time_from_exp)  # Set the minimum for the breakpoints
> e <- max(time_from_exp # Set the maximum for the breakpoints
b <- min(time_from_exp)  # Set the minimum for the breakpoints
e <- max(time_from_exp # Set the maximum for the breakpoints
b <- min(time_from_exp)  # Set the minimum for the breakpoints
e <- max(time_from_exp # Set the maximum for the breakpoints
(e-b)/7
e <- max(time_from_exp # Set the maximum for the breakpoints
e <- max(time_from_exp) # Set the maximum for the breakpoints
n = (round(e-b)/7),1)
(e-b)/7
(round((e-b)/7),1)
ax <- pretty(b:e, n = (round((e-b)/7),digits=1) # Make a neat vector for the breakpoints
round(((e-b)/7),digits=1))
bins<-
ax <- pretty(b:e, n = (round(((e-b)/7),digits=1))) # Make a neat vector for the breakpoints
ax <- pretty(b:e, n = (round(((e-b)/7),digits=1))) # Make a neat vector for the breakpoints
ax
(round(((e-b)/7),digits=1))
ax <- pretty(b:e, n = (round(((e-b)/7),digits=0))) # Make a neat vector for the breakpoints
ax
> hgA <- hist(time_from_exp[time_from_exp<0], breaks = ax, plot = FALSE) # Save first histogram data
time_from_exp<0
time_from_exp[time_from_exp<0]
hgA <- hist((time_from_exp[time_from_exp<0]), breaks = ax, plot = FALSE) # Save first histogram data
burnin=-30
control1=-30
exposure1=30
exposure2=60
control2= max(time_from_exp)
max(table(time_from_exp))
hg_unex_1 <- hist((time_from_exp[time_from_exp<0]), breaks = ax,xlim = c(min(time_from_exp, max(time_from_exp))), ylim(c(0, (max(table(time_from_exp))+2)) plot = FALSE) # Save first histogram data
hg_burnin <- hist((time_from_exp[between(time_from_exp, control1, burnin]), breaks = ax,xlim = c(min(time_from_exp, max(time_from_exp))), ylim(c(0, (max(table(time_from_exp))+2)), plot = FALSE) # Save first histogram data
hg_burnin <- hist((time_from_exp[between(time_from_exp, control1, burnin)]), breaks = ax,xlim = c(min(time_from_exp, max(time_from_exp))), ylim(c(0, (max(table(time_from_exp))+2)), plot = FALSE) # Save first histogram data
hg_burnin <- hist((time_from_exp[between(time_from_exp, control1, burnin)]), breaks = ax,xlim = c(min(time_from_exp, max(time_from_exp))), ylim(c(0, (max(table(time_from_exp))+2)), plot = FALSE) # Save first histogram data
> plot(hg_unex_1, col = c1) # Plot 1st histogram using a transparent color
plot(hg_unex_1, col = c1) # Plot 1st histogram using a transparent color
hg_unex_1 <- hist((time_from_exp[time_from_exp<=control1]), breaks = ax,
hg_burnin <- hist((time_from_exp[between(time_from_exp, control1, burnin)]), breaks = ax,
plot(hg_unex_1, col = c1) # Plot 1st histogram using a transparent color
hg_unex_1 <- hist((time_from_exp[time_from_exp<=control1]), breaks = ax,
xlim = c(min(time_from_exp, max(time_from_exp))), ylim(c(0, (max(table(time_from_exp))+2)), plot = FALSE)
hg_unex_1
hg_unex_1 <- hist((time_from_exp[time_from_exp<=control1]), breaks = ax)
c(min(time_from_exp, max(time_from_exp)))
hg_unex_1 <- hist((time_from_exp[time_from_exp<=control1]), breaks = ax,
,
xlim = c(min(time_from_exp), max(time_from_exp))), ylim(c(0, (max(table(time_from_exp))+2)), plot = FALSE)
hg_unex_1 <- hist((time_from_exp[time_from_exp<=control1]), breaks = ax,
,
xlim = c(min(time_from_exp), max(time_from_exp)), ylim(c(0, (max(table(time_from_exp))+2))), plot = FALSE)
hg_unex_1
plot(hg_unex_1, col = c1) # Plot 1st histogram using a transparent color
plot(hg_unex_1, col = grey) # Plot 1st histogram using a transparent color
plot(hg_unex_1, col = "grey") # Plot 1st histogram using a transparent color
(max(table(time_from_exp))+2))
max(table(time_from_exp))
table(time_from_exp)
hg_all<-hist(time_from_exp, plot=F)
hg_all<-hist(time_from_exp,breaks=ax, plot=F)
max(hg_all$counts)
hg_unex_1 <- hist((time_from_exp[time_from_exp<=control1]), breaks = ax,
,
xlim = c(min(time_from_exp), max(time_from_exp)), ylim(c(0, (max(hg_all$counts)+2))), plot = FALSE)
plot(hg_unex_1, col = "grey") # Plot 1st histogram using a transparent color
hg_unex_1 <- hist((time_from_exp[time_from_exp<=control1]), breaks = ax, xlim = c(min(time_from_exp), max(time_from_exp)), ylim(c(0, (max(hg_all$counts)+2))), plot = FALSE)
plot(hg_unex_1, col = "grey") # Plot 1st histogram using a transparent color
(max(hg_all$counts)+2))
(max(hg_all$counts)+2)
hg_unex_1 <- hist((time_from_exp[time_from_exp<=control1]), breaks = ax, xlim = c(min(time_from_exp), max(time_from_exp)), ylim(c(0, (max(hg_all$counts)+2))), xaxs="i", yaxs="i", plot = FALSE)
plot(hg_unex_1, col = "grey") # Plot 1st histogram using a transparent color
plot(hg_unex_1, xlim = c(min(time_from_exp), max(time_from_exp)), ylim(c(0, (max(hg_all$counts)+2))), xaxs="i", yaxs="i",col = "grey") # Plot 1st histogram using a transparent color
hg_unex_1 <- hist((time_from_exp[time_from_exp<=control1]), breaks = ax, plot = FALSE)
plot(hg_unex_1, xlim = c(min(time_from_exp), max(time_from_exp)), ylim(c(0, (max(hg_all$counts)+2))),col = "grey") # Plot 1st histogram using a transparent color
hg_burnin <- hist((time_from_exp[between(time_from_exp, control1, burnin)]), breaks = ax, plot = FALSE)
plot(hg_burnin, col="lightblue", add=T)
time_from_exp[between(time_from_exp, control1, burnin)]
burnin
burnin=0
hg_unex_1 <- hist((time_from_exp[time_from_exp<=control1]), breaks = ax, plot = FALSE)
hg_burnin <- hist((time_from_exp[between(time_from_exp, control1, burnin)]), breaks = ax, plot = FALSE)
plot(hg_unex_1, col = "grey") # Plot 1st histogram using a transparent color
plot(hg_burnin, col="lightblue", add=T)
control1=-31
burnin= 0
exposure1=30
exposure2=60
exposure3=100
control2= max(time_from_exp)
hg_unex_1 <- hist((time_from_exp[time_from_exp<=control1]), breaks = ax, plot = FALSE)
hg_burnin <- hist((time_from_exp[between(time_from_exp, (control1+1), burnin)]), breaks = ax, plot = FALSE)
plot(hg_unex_1, col = "grey") # Plot 1st histogram using a transparent color
plot(hg_burnin, col="lightblue", add=T)
control1+1
hg_unex_1 <- hist((time_from_exp[time_from_exp<=control1]), breaks = ax, plot = FALSE)
hg_unex_1
hg_ex1 <- hist((time_from_exp[between(time_from_exp, (burnin+1), exposure1)]), breaks = ax, plot = FALSE)
plot(hg_burnin, col="red", add=T)
plot(hg_ex1, col="red", add=T)
plot(hg_unex_1, col = "grey") # Plot 1st histogram using a transparent color
plot(hg_burnin, col="lightblue", add=T)
plot(hg_ex1, col="red", add=T)
hg_ex2 <- hist((time_from_exp[between(time_from_exp, (exposure1+1), exposure2)]), breaks = ax, plot = FALSE)
plot(hg_ex2, col="orange", add=T)
hg_ex3 <- hist((time_from_exp[between(time_from_exp, (exposure2+1), exposure3)]), breaks = ax, plot = FALSE)
plot(hg_ex3, col="yellow", add=T)
hg_unex1 <- hist((time_from_exp[time_from_exp<=control1]), breaks = ax, plot = FALSE)
hg_unex2 <- hist((time_from_exp[time_from_exp>=(exposure3+1)]), breaks = ax, plot = FALSE)
plot(hg_unex1, col = "grey") # Plot 1st histogram using a transparent color
plot(hg_burnin, col="lightblue", add=T)
plot(hg_ex1, col="red", add=T)
plot(hg_ex2, col="orange", add=T)
plot(hg_ex3, col="yellow", add=T)
plot(hg_unex2, col="grey", add=T)
plot(hg_unex1, col = "grey", main="SCRI event frequency", ylim=c(0,20)) # Plot 1st histogram using a transparent color
ymax<-(max(hg_all$counts)+3)
ymax
plot(hg_unex1, col = "grey", main="SCRI event frequency", ylim=c(0,ymax)) # Plot 1st histogram using a transparent color
plot(hg_burnin, col="lightblue", add=T)
plot(hg_ex1, col="red", add=T)
plot(hg_ex2, col="orange", add=T)
plot(hg_ex3, col="yellow", add=T)
plot(hg_unex2, col="grey", add=T)
abline(v = 0)
abline(v = 0, lwd=2)
plot(hg_unex1, col = "grey", main="SCRI event frequency", ylim=c(0,ymax)) # Plot 1st histogram using a transparent color
plot(hg_burnin, col="lightblue", add=T)
plot(hg_ex1, col="red", add=T)
plot(hg_ex2, col="orange", add=T)
plot(hg_ex3, col="yellow", add=T)
plot(hg_unex2, col="grey", add=T)
abline(v = 0, lwd=2, lty=3)
legend("topright", col=c("grey", "lightblue", "red", "orange", "yellow"),
c("unexposed", "buffer", "exposure 1", "exposure 2", "exposure 3"))
plot(hg_unex1, col = "grey", main="SCRI event frequency", ylim=c(0,ymax)) # Plot 1st histogram using a transparent color
plot(hg_burnin, col="lightblue", add=T)
plot(hg_ex1, col="red", add=T)
plot(hg_ex2, col="orange", add=T)
plot(hg_ex3, col="yellow", add=T)
plot(hg_unex2, col="grey", add=T)
abline(v = 0, lwd=2, lty=3)
legend("topright", pch=1, col=c("grey", "lightblue", "red", "orange", "yellow"),
c("unexposed", "buffer", "exposure 1", "exposure 2", "exposure 3"), bty="n")
plot(hg_unex1, col = "grey", main="SCRI event frequency", ylim=c(0,ymax)) # Plot 1st histogram using a transparent color
plot(hg_burnin, col="lightblue", add=T)
plot(hg_ex1, col="red", add=T)
plot(hg_ex2, col="orange", add=T)
plot(hg_ex3, col="yellow", add=T)
plot(hg_unex2, col="grey", add=T)
abline(v = 0, lwd=2, lty=3)
legend("topright", pch=16, col=c("grey", "lightblue", "red", "orange", "yellow"),
c("unexposed", "buffer", "exposure 1", "exposure 2", "exposure 3"), bty="n")
legend("topright", pch=16, cex=2, col=c("grey", "lightblue", "red", "orange", "yellow"),
c("unexposed", "buffer", "exposure 1", "exposure 2", "exposure 3"), bty="n")
plot(hg_unex1, col = "grey", main="SCRI event frequency", cex=2, ylim=c(0,ymax)) # Plot 1st histogram using a transparent color
plot(hg_burnin, col="lightblue", add=T)
plot(hg_ex1, col="red", add=T)
plot(hg_ex2, col="orange", add=T)
plot(hg_ex3, col="yellow", add=T)
plot(hg_unex2, col="grey", add=T)
abline(v = 0, lwd=2, lty=3)
legend("topright", pch=16, cex=2, col=c("grey", "lightblue", "red", "orange", "yellow"),
c("unexposed", "buffer", "exposure 1", "exposure 2", "exposure 3"), bty="n")
plot(hg_unex1, col = "grey", main="SCRI event frequency", cex=2, ylim=c(0,ymax)) # Plot 1st histogram using a transparent color
plot(hg_burnin, col="lightblue", add=T)
plot(hg_ex1, col="red", add=T)
plot(hg_ex2, col="orange", add=T)
plot(hg_ex3, col="yellow", add=T)
plot(hg_unex2, col="grey", add=T)
abline(v = 0, lwd=2, lty=3)
legend("topright", pch=16, cex=1.5, pt.cex=2, col=c("grey", "lightblue", "red", "orange", "yellow"),
c("unexposed", "buffer", "exposure 1", "exposure 2", "exposure 3"), bty="n")
plot(hg_unex1, col = "grey", main="SCRI event frequency", cex.main=2, ylim=c(0,ymax), xlab="Time from 1st Vaccination", cex.lab=1.5) # Plot 1st histogram using a transparent color
plot(hg_burnin, col="lightblue", add=T)
plot(hg_ex1, col="red", add=T)
plot(hg_ex2, col="orange", add=T)
plot(hg_ex3, col="yellow", add=T)
plot(hg_unex2, col="grey", add=T)
abline(v = 0, lwd=2, lty=3)
legend("topright", pch=16, cex=1.5, pt.cex=2, col=c("grey", "lightblue", "red", "orange", "yellow"),
c("unexposed", "buffer", "exposure 1", "exposure 2", "exposure 3"), bty="n")
plot(hg_unex1, col = "grey", main="SCRI event frequency", cex.main=2, ylim=c(0,ymax), xlab="Time from 1st Vaccination", cex.lab=1.5) # Plot 1st histogram using a transparent color
plot(hg_burnin, col="lightblue", add=T)
plot(hg_ex1, col="red", add=T)
plot(hg_ex2, col="orange", add=T)
plot(hg_ex3, col="yellow", add=T)
plot(hg_unex2, col="grey", add=T)
abline(v = 0, lwd=2, lty=3)
legend("topright", pch=16, cex=1.5, pt.cex=2, col=c("grey", "lightblue", "red", "orange", "yellow"),
c("control", "buffer", "risk 1", "risk 2", "risk 3"), bty="n")
plot(hg_unex1, col = "grey", main="SCRI event frequency", cex.main=2, ylim=c(0,ymax), xlab="Time from 1st Vaccination", cex.lab=1.5) # Plot 1st histogram using a transparent color
plot(hg_burnin, col="lightblue", add=T)
plot(hg_ex1, col="red", add=T)
plot(hg_ex2, col="orange", add=T)
plot(hg_ex3, col="yellow", add=T)
plot(hg_unex2, col="grey", add=T)
abline(v = 0, lwd=3, lty=3)
legend("topright", pch=16, cex=1.5, pt.cex=2, col=c("grey", "lightblue", "red", "orange", "yellow"),
c("control", "buffer", "risk 1", "risk 2", "risk 3"), bty="n")
